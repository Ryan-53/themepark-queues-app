"""
Name: test_firebase_access.py
Author: Ryan Gascoigne-Jones

Purpose: Tests firebase_access.py file for accessing and adding ride
  notifications to the remote DB
"""

from django.test import TestCase
from unittest.mock import patch, Mock
from ..utils.firebase_access import add_notif, add_to_email_list, \
  get_notif_db_url, get_park_url, get_ride_url
import logging

logging.getLogger().setLevel(logging.ERROR)


class AddNotifTest(TestCase):

  @patch('firebase_admin.db.reference')
  @patch('rides.utils.firebase_access.add_to_email_list')
  @patch('rides.utils.firebase_access.get_ride_url')
  def test_add_notif(self, mock_get_ride_url, mock_add_to_email_list,
                     mock_reference):
    """Tests adding/updating a ride notification to the remote DB"""

    # Mocks ride URL and list of emails generated by add_to_email_list()
    mock_get_ride_url.return_value = 'mocked_ride_url'
    mock_add_to_email_list.return_value = ['test@example.com']

    # Creates a mock reference to simulate DB reference
    mock_ref = Mock()
    mock_reference.return_value = mock_ref

    # Call the function with mock test data
    add_notif(park_id=1, ride_id=101, ride_name='Test Ride',
              user_email='test@example.com')

    # Checks get_ride_url() called correctly
    mock_get_ride_url.assert_called_once_with(park_id=1, ride_id=101)

    # Checks add_to_email_list)_ called with correct parameters
    mock_add_to_email_list.assert_called_once_with(ride_url='mocked_ride_url',
      user_email='test@example.com')
    
    # Checks the reference was created with the correct URL
    mock_reference.assert_called_once_with('mocked_ride_url')

    # Checks the update method is called with correct data
    mock_ref.update.assert_called_once_with({
        'ride_id': 101,
        'ride_name': 'Test Ride',
        'user_emails': ['test@example.com']
    })


class AddToEmailListTest(TestCase):

  @patch('firebase_admin.db.reference')
  def test_add_to_email_list(self, mock_reference):
    """Tests adding a new email to the existing email list"""

    # Create a mock reference to simulate the Firebase database reference
    mock_ref = Mock()
    mock_reference.return_value = mock_ref
    
    # Set up the mock to return an existing email list when get() is called
    mock_ref.get.return_value = ['existing@example.com']

    # Call the function with a test URL and a new email
    emails = add_to_email_list('mocked_ride_url', 'new@example.com')

    # Assert that the reference was created with the correct URL
    mock_reference.assert_called_once_with('mocked_ride_url/user_emails')

    # Assert that the get() method was called on the reference
    mock_ref.get.assert_called_once()

    # Check that the returned list contains the existing email and the new one
    self.assertEqual(emails, ['existing@example.com', 'new@example.com'])

  @patch('firebase_admin.db.reference')
  def test_add_to_email_list_empty(self, mock_reference):
    """Tests adding an email when the current list is empty"""

    # Create a mock reference to simulate the Firebase database reference
    mock_ref = Mock()
    mock_reference.return_value = mock_ref

    # Set up the mock to return None (representing an empty list)
    mock_ref.get.return_value = None

    # Call the function with a test URL and a new email
    emails = add_to_email_list('mocked_ride_url', 'new@example.com')

    # Assert that the reference was created with the correct URL
    mock_reference.assert_called_once_with('mocked_ride_url/user_emails')

    # Assert that the get() method was called on the reference
    mock_ref.get.assert_called_once()

    # Check that the returned list contains only the new email
    self.assertEqual(emails, ['new@example.com'])


class GetUrlsFunctionsTest(TestCase):
  """Tests the 3 functions used to retrieve the url of the firebase"""

  def test_get_notif_db_url(self):
    """Tests the get_notif_db_url() function for correctness"""

    url = get_notif_db_url()
    self.assertEqual(url, "notifications")

  @patch('rides.utils.firebase_access.get_notif_db_url')
  def test_get_park_url(self, mock_get_notif_db_url):
    """Tests the get_park_url() function for correctness"""

    # Mocks the previous functions result of the notifications section in
    # the firebase DB.
    mock_get_notif_db_url.return_value = "notifications"
    
    url = get_park_url(1)
    self.assertEqual(url, "notifications/1")

  @patch('rides.utils.firebase_access.get_park_url')
  def test_get_ride_url(self, mock_get_park_url):
    """Tests the get_ride_url() function for correctness"""

    # Mocks the previous functions result of the area for storing
    # notifications for a specific park.
    mock_get_park_url.return_value = "notifications/1"
    
    url = get_ride_url(1, 101)
    self.assertEqual(url, "notifications/1/101")